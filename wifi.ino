// –°–µ—Ç–µ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–∏: –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ WiFi –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –ø–æ NTP

void connectToWiFi() {
  const char* ssid = "5stars";
  const char* password = "Vaio8010";
  Serial.print("üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Wi-Fi: ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);

  int attempts = 0;
  while (WiFi.status() != WL_CONNECTED && attempts < 20) {
    delay(550);
    Serial.print(".");
    attempts++;
  }

  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("\n‚úÖ Wi-Fi –ø–æ–¥–∫–ª—é—á–µ–Ω!");
    Serial.print("üì° IP –∞–¥—Ä–µ—Å: ");
    Serial.println(WiFi.localIP());
  } else {
    Serial.println("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Wi-Fi! ");
  }
}

DateTime syncRTC() {
  const char* ntpServers[] = {
    "time.belgim.by",
    "1.by.pool.ntp.org",
    "2.by.pool.ntp.org",
    "time.windows.com"
  };
  const int ntpServerCount = sizeof(ntpServers) / sizeof(ntpServers[0]);
  const long gmtOffset_sec = 3 * 3600;
  const int daylightOffset_sec = 0;

  struct tm timeinfo;
  for (int i = 0; i < ntpServerCount; i++) {
    Serial.print("üåê NTP –ø–æ–ø—ã—Ç–∫–∞: ");
    Serial.println(ntpServers[i]);
    configTime(gmtOffset_sec, daylightOffset_sec, ntpServers[i]);
    delay(100);

    if (getLocalTime(&timeinfo)) {
      DateTime ntpTime = DateTime(
        timeinfo.tm_year + 1900,
        timeinfo.tm_mon + 1,
        timeinfo.tm_mday,
        timeinfo.tm_hour,
        timeinfo.tm_min,
        timeinfo.tm_sec);

      DateTime rtcTime = rtc.now();
      long diff = abs((long)(rtcTime.unixtime() - ntpTime.unixtime()));

      Serial.print("üìä –†–∞–∑–Ω–∏—Ü–∞ RTC vs NTP: ");
      Serial.print(diff);
      Serial.println(" —Å–µ–∫");

      if (diff > 2) {
        rtc.adjust(ntpTime);
        Serial.print("‚úÖ RTC —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: ");
        Serial.printf("%02d:%02d:%02d\n", ntpTime.hour(), ntpTime.minute(), ntpTime.second());
        return ntpTime;
      } else {
        Serial.println("‚è± RTC —É–∂–µ —Ç–æ—á–Ω–æ–µ");
        return rtcTime;  // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–µ–µ, –æ–Ω–æ —É–∂–µ —Ç–æ—á–Ω–æ–µ
      }
    } else {
      Serial.println("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º—è");
    }
  }

  Serial.println("‚ö†Ô∏è –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ NTP –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å");
  return rtc.now();  // –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ö–æ—Ç—å —á—Ç–æ-—Ç–æ
}

void handleHourlySync(DateTime now) {  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –∫–∞–∂–¥—ã–π —á–∞—Å –Ω–∞ 15–π –º–∏–Ω—É—Ç–µ –≤ –ø–æ–∫–æ–µ
  static int lastHour = -1;
  if (now.hour() != lastHour) {
    lastHour = now.hour();
    syncedThisHour = false;
  }

  if (now.minute() == 15 && !syncedThisHour && arrowState == IDLE) {
    DateTime syncedTime = syncRTC();  // ‚Üê –≤—ã–∑–æ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
    if (syncedTime.isValid()) {       // ‚Üê –ø—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
      syncedThisHour = true;
      Serial.println("‚úÖ RTC —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: " + syncedTime.timestamp());
    } else {
      Serial.println("‚ö†Ô∏è –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å");
    }
  }
}
