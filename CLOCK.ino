// ===========–ì–ª–∞–≤–Ω—ã–π –º–æ–¥—É–ª—å. –û—Ç—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –∏ –≤—ã–∑–æ–≤ –≤ –Ω—É–∂–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã ===========
// arrow.ino –ø–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–µ–ª–æ–∫
// wifi.ino –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ WiFi –∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ (RTC)
// chimes.ino –ë–æ–π –º–æ–ª–æ—Ç–æ—á–∫–æ–º
#include <WiFi.h>
#include <ESP32Servo.h>
Servo sg90;
#include <Wire.h>
#include <RTClib.h>  // RealTimeClock module
RTC_DS3231 rtc;

// =========== –®–∞–≥–æ–≤—ã–π –º–æ—Ç–æ—Ä —Å—Ç—Ä–µ–ª–æ–∫ ===========
#include <AccelStepper.h>  // –®–∞–≥–æ–≤—ã–π –º–æ—Ç–æ—Ä
#define IN1 D3
#define IN2 D2
#define IN3 D1
#define IN4 D0
AccelStepper stepper(AccelStepper::HALF4WIRE, IN1, IN3, IN2, IN4);  // HALF4WIRE - –ø–æ–ª—É—à–∞–≥–æ–≤—ã–π —Ä–µ–∂–∏–º 28BYJ-48

// =========== –û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∏–∫—Ä–∏–∫–∞ –∏ —Å—Ç—Ä–µ–ª–æ–∫ ===========
#include "arrow.h"
const int microSw_PIN = D7;    // –í—Ç–æ—Ä–æ–π –∫–æ–Ω—Ç–∞–∫—Ç –º–∏–∫—Ä–∏–∫–∞
const int debounceDelay = 50;  // –ê–Ω—Ç–∏–¥—Ä–µ–±–µ–∑–≥, –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥
bool lastStableState = LOW;    // –í —Å–≤–±–æ–¥–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –º–∏–∫—Ä–∏–∫ –∑–ø–º–∫–Ω—É—Ç –Ω–∞ GND - LOW
int lastReading = LOW;
unsigned long lastDebounceTime = 0;
bool microSwTriggered = false;  // –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –º–∏–∫—Ä–∏–∫–∞, —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏

//
int arrowMinute = -1;         // –ü–æ–ª–æ–∂–µ–Ω–∏–µ —Å—Ç—Ä–µ–ª–∫–∏ (–≤ –º–∏–Ω—É—Ç–∞—Ö)
int lastRtcMinute = -1;       // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –º–∏–Ω—É—Ç—É –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
bool syncedThisHour = false;  // –ß—Ç–æ–±—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –≤ –Ω—É–∂–Ω—É—é –º–∏–Ω—É—Ç—É

bool systemReady = false;  // –≥–ª–æ–±–∞–ª—å–Ω—ã–π —Ñ–ª–∞–≥ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏

void setup() {
  Serial.begin(19200);
    delay(500);             // –ü–∞—É–∑–∞ –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  chimesetup();           // –í—ã–∑—ã–≤–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –º–æ–ª–æ—Ç–æ—á–∫–∞
  connectToWiFi();        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ WiFi
  Wire.begin(5, 6);       // –®–∏–Ω–∞ –º–æ–¥—É–ª—è RTC - SDA=D4 (GPIO5), SCL=D5 (GPIO6)
    delay(50);     // üßò –î–∞–µ–º —à–∏–Ω–µ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è
  bool rtcReady = false;  // –î–ª—è RTC –º–æ–¥—É–ª—è
  // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–≤–∏–∂–µ–Ω–∏—è —Å—Ç—Ä–µ–ª–∫–∏
  stepper.setMaxSpeed(900.0);          // –ú–∞–∫—Å.—Å–∫–æ—Ä–æ—Å—Ç—å —à–∞–≥–æ–≤–∏–∫–∞ –≤ —à–∞–≥–∞—Ö/—Å–µ–∫ –≤ –ø–æ–ª—É—à–∞–≥–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
  stepper.setAcceleration(350.0);      // –£—Å–∫–æ—Ä–µ–Ω–∏–µ –≤ —à–∞–≥–∞—Ö/—Å–µ–∫¬≤
  pinMode(microSw_PIN, INPUT_PULLUP);  // –°–∏–≥–Ω–∞–ª –æ—Ç –ù–ó –º–∏–∫—Ä–∏–∫–∞. LOW ‚Üí HIGH –∫–∞–∂–¥—ã–µ –ø–æ–ª—á–∞—Å–∞

  delay(100);       // üßò –î–∞—Ç—å —à–∏–Ω–µ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è –ø–µ—Ä–µ–¥ RTC
  for (int i = 0; i < 3; i++) {
    if (rtc.begin()) {
      rtcReady = true;
      break;
    }
    delay(300);
  }
  if (!rtcReady) {
    Serial.println("‚ùå RTC –Ω–µ –Ω–∞–π–¥–µ–Ω! –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä.");
//    while (1)
    delay(1000);    // –î–∞—Ç—å –≤—Ä–µ–º—è –Ω–∞ –≤—ã–≤–æ–¥
    ESP.restart();  // üîÅ –ú—è–≥–∫–∞—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞
  }

  delay(250);                  // –¥–∞—ë–º IDE –≤—Ä–µ–º—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
  DateTime now = syncRTC();    // —á–∏—Ç–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
  arrowMinute = now.minute();  // üß≠ –ü–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —Å—Ç—Ä–µ–ª–∫–∞ —É–∂–µ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω–∞ –Ω–∞ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
  arrowState = IDLE;           // –∏ –ø–æ–∂—Ç–æ–º—É –Ω–µ –Ω—É–∂–Ω–æ –Ω–∏–∫—É–¥–∞ –µ—Ö–∞—Ç—å
  Serial.printf("‚úÖ –°—Ç–∞—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω. üï∞Ô∏è –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è RTC: %02d:%02d:%02d %02d.%02d.%04d\n",
                now.hour(), now.minute(), now.second(),
                now.day(), now.month(), now.year());
  lastRtcMinute = now.minute();
  systemReady = true;  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥  –æ–∫–æ–Ω—á–∞–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
}

void loop() {
  if (!systemReady) return;  // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø—Ä–µ–∂–¥–µ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ FSM
  DateTime now = rtc.now();
  int rtcMinute = now.minute();  // –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è RTC
  int currentSecond = now.second();
  bool microSwitchState = digitalRead(microSw_PIN) == LOW;

  int hour = now.hour() % 12;  // –í—ã—á–∏—Å–ª—è–µ–º —á–∞—Å
  hour = (hour == 0) ? 12 : hour;

//  if (arrowState == MOVING) {  // –û–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ –¥–≤–∏–∂–µ–Ω–∏—è —Å—Ç—Ä–µ–ª–∫–∏
    stepper.run();             // –î–≤–∏–≥–∞–µ–º —à–∞–≥–æ–≤–∏–∫, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

    if (stepper.distanceToGo() == 0) {
      arrowState = IDLE;  //
      stepper.disableOutputs();
    }
//  }
microSw();  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–π –∫–æ–Ω—Ü–µ–≤–∏–∫–∞ —Å—Ç—Ä–µ–ª–æ–∫
handleHourlySync(now); // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–∂–¥—ã–π —á–∞—Å. –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ –≤ wifi.ino
arrowFSM_update(now, arrowMinute, rtcMinute, currentSecond, microSwitchState);
}
