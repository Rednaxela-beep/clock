// arrow.ino - –§–µ—Ö—Ç–æ–≤–∞–Ω–∏–µ –º–∏–Ω—É—Ç–Ω–æ–π —Å—Ç—Ä–µ–ª–∫–æ–π ;-)
int StepsForMinute = -6500;  // –û–¥–Ω–∞ –º–∏–Ω—É—Ç–∞ –≤ –ø–æ–ª—É—à–∞–≥–æ–≤–æ–º —Ä–µ–∂–∏–º–µ = —Ç–µ–æ—Ä–∏—Ç–∏—á–µ—Å–∫–∏ 6245 —à–∞–≥–æ–≤

void logFSM(DateTime now, ArrowState state) {  // –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
  const char* name = nullptr;
  switch (state) {
    case IDLE: name = "IDLE"; break;
    case MOVING: name = "MOVING"; break;
    case LAG: name = "CORRECTING_LAG"; break;
    case BREAK: name = "WAITING_FOR_ZERO"; break;
    default: name = "UNKNOWN"; break;
  }
  Serial.printf("[%02d:%02d:%02d] ‚Ü©Ô∏è FSM: %s\n", now.hour(), now.minute(), now.second(), name);
}

// –î–æ–≤–æ–ª—å–Ω–æ –Ω–µ–≥–ª—É–ø–∞—è FSM —Å–æ —Å—Ç–æ—Ä–æ–∂–∞–º–∏ –º–∏–∫—Ä–∏–∫–∞ –≤—Ä–µ–º–µ–Ω–∞ –¥–ª—è —Ü–∏—Ä–∫–∞ —Å–æ —Å—Ç—Ä–µ–ª–∫–æ–π
void arrowFSM_update(DateTime now, int arrowMinute, int rtcMinute, int currentSecond, bool microSwitchState) {
  static int lastRtcMinute = -1;
  static ArrowState lastState = UNKNOWN;
  static int stepCounter = 0;

  if (arrowState != lastState) {
    logFSM(now, arrowState);
    lastState = arrowState;
  }

  if (arrowState == MOVING || arrowState == LAG) {
    if (stepper.distanceToGo() > 0) {
      stepCounter++;
      Serial.printf("ü¶∂ –®–∞–≥ #%d ‚Üí –æ—Å—Ç–∞–ª–æ—Å—å: %d\n", stepCounter, stepper.distanceToGo());
    }
  }

  // üê∂ –°—Ç–æ—Ä–æ–∂ ‚Ññ1 ‚Äî —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –º–∏–∫—Ä–∏–∫ –≤ MOVING
  if (arrowState == MOVING && microSwitchState) {
    if (rtcMinute == 59) {
      stepper.disableOutputs();
      arrowState = IDLE;
      Serial.println("‚úÖ –ö–æ–Ω—Ü–µ–≤–∏–∫ –Ω–∞ 59-–π –º–∏–Ω—É—Ç–µ ‚Üí —Å—Ç–æ–ø –∏ IDLE");
      return;
    } else if (rtcMinute >= 45 && rtcMinute <= 58) {
      stepper.disableOutputs();
      arrowState = BREAK;
      Serial.println("ü•ä BREAK: –æ–ø–µ—Ä–µ–∂–µ–Ω–∏–µ ‚Üí –∂–¥—ë–º 00:00");
      return;
    }
  }

  // üê∂ –°—Ç–æ—Ä–æ–∂ ‚Ññ2 ‚Äî —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ –º–∏–∫—Ä–∏–∫ –≤ –Ω–∞—á–∞–ª–µ —á–∞—Å–∞
  if (arrowState == IDLE && rtcMinute >= 0 && rtcMinute <= 3 && microSwitchState) {
    int missedMinutes = rtcMinute;
    int remainingSteps = StepsForMinute - stepper.currentPosition();
    int correctionSteps = remainingSteps * missedMinutes;

    stepper.setCurrentPosition(0);
    stepper.moveTo(correctionSteps);
    arrowState = LAG;
    Serial.printf("‚è≥ –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –æ—Ç—Å—Ç–∞–≤–∞–Ω–∏—è: %d —à–∞–≥–æ–≤\n", correctionSteps);
    return;
  }
  switch (arrowState) {
    case IDLE:
      if (rtcMinute != lastRtcMinute) {
        lastRtcMinute = rtcMinute;
        if (arrowMinute != rtcMinute) {
          stepper.setCurrentPosition(0);
          stepper.moveTo(StepsForMinute);
          arrowState = MOVING;
          Serial.printf("‚ñ∂Ô∏è –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –º–∏–Ω—É—Ç—É %02d\n", rtcMinute);
        }
      }
      break;

    case MOVING:
      if (stepper.distanceToGo() == 0) {
        stepper.disableOutputs();

        if (arrowMinute == 59 && !microSwitchState) {
          stepper.setCurrentPosition(0);
          stepper.moveTo(StepsForMinute * 4);
          arrowState = LAG;
          Serial.println("‚ö†Ô∏è –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –Ω–∞ 59-–π –º–∏–Ω—É—Ç–µ ‚Üí –Ω–∞—á–∏–Ω–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ –¥–æ –º–∏–∫—Ä–∏–∫–∞");
        } else {
          arrowState = IDLE;
        }
      }
      break;

    case LAG:
      if (microSwTriggered) {
        microSwTriggered = false;
        stepper.disableOutputs();
        arrowState = IDLE;
        Serial.println("‚úÖ –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ –º–∏–∫—Ä–∏–∫—É");
      } else if (stepper.distanceToGo() == 0) {
        stepper.disableOutputs();
        arrowState = IDLE;
        Serial.println("‚ö†Ô∏è –î–≤–∏–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –Ω–æ –º–∏–∫—Ä–∏–∫ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª");
      }
      break;

    case BREAK:
      if (rtcMinute == 0 && currentSecond <= 5) {
        stepper.setCurrentPosition(0);
        stepper.moveTo(StepsForMinute);
        arrowState = MOVING;
        Serial.println("üïõ 00:00 ‚Üí –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ");
      }
      break;
  }
}

void microSw() {
  int signal = digitalRead(microSw_PIN);
  static int lastSignalMinute = -1;

  if (signal != lastReading) {
    lastDebounceTime = millis();
    lastReading = signal;
  }

  if ((millis() - lastDebounceTime) > debounceDelay) {
    if (signal != lastStableState) {
      lastStableState = signal;

      if (signal == HIGH) {
        Serial.println("üîò –í–∑–≤–æ–¥ –∫–æ–Ω—Ü–µ–≤–∏–∫–∞");
      } else {
        Serial.println("üîò –ö–æ–Ω—Ü–µ–≤–∏–∫ —Å—Ä–∞–±–æ—Ç–∞–ª!");

        // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –º–∏–Ω—É—Ç–µ
        DateTime now = rtc.now();  // ‚Üê –µ—Å–ª–∏ rtc –¥–æ—Å—Ç—É–ø–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ
        int m = now.minute();

        // if (m == 59) {
        //   microSwTriggered = true;
        // } else {
        //   Serial.println("üï≥Ô∏è –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–µ –≤–Ω–µ 59-–π –º–∏–Ω—É—Ç—ã");
        //   microSwTriggered = false;
        // }
      }
    }
  }
}
